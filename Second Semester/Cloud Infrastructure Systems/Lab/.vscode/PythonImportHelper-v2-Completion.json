[
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "put",
        "kind": 2,
        "importPath": "Assignment_4.krishnaraj_cis_4",
        "description": "Assignment_4.krishnaraj_cis_4",
        "peekOfCode": "def put(key, value):\n    # store something\n    s3.put_object(\n        Body=json.dumps({key: value}),\n        Bucket=\"cyclic-tame-red-seagull-shoe-us-east-1\",\n        Key=f\"some_files/{key}.json\"\n    )\n    print(\"Stored successfully\")\ndef get(key):\n    # get it back",
        "detail": "Assignment_4.krishnaraj_cis_4",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "Assignment_4.krishnaraj_cis_4",
        "description": "Assignment_4.krishnaraj_cis_4",
        "peekOfCode": "def get(key):\n    # get it back\n    my_file = s3.get_object(\n        Bucket=\"cyclic-tame-red-seagull-shoe-us-east-1\",\n        Key=f\"some_files/{key}.json\"\n    )\n    return json.loads(my_file['Body'].read())\ndef delete(key):\n    # delete the key\n    s3.delete_object(",
        "detail": "Assignment_4.krishnaraj_cis_4",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "Assignment_4.krishnaraj_cis_4",
        "description": "Assignment_4.krishnaraj_cis_4",
        "peekOfCode": "def delete(key):\n    # delete the key\n    s3.delete_object(\n        Bucket=\"cyclic-tame-red-seagull-shoe-us-east-1\",\n        Key=f\"some_files/{key}.json\"\n    )\ndef listbucket():\n    # list all keys\n    my_bucket = s3.list_objects(\n        Bucket=\"cyclic-tame-red-seagull-shoe-us-east-1\"",
        "detail": "Assignment_4.krishnaraj_cis_4",
        "documentation": {}
    },
    {
        "label": "listbucket",
        "kind": 2,
        "importPath": "Assignment_4.krishnaraj_cis_4",
        "description": "Assignment_4.krishnaraj_cis_4",
        "peekOfCode": "def listbucket():\n    # list all keys\n    my_bucket = s3.list_objects(\n        Bucket=\"cyclic-tame-red-seagull-shoe-us-east-1\"\n    )\n    return my_bucket\nif __name__ == \"__main__\":\n    print(\"Welcome to CIS assignment 4\")\n    print(\"What do you want to do: \")\n    print(\"1. Store a key value pair\")",
        "detail": "Assignment_4.krishnaraj_cis_4",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "Assignment_4.krishnaraj_cis_4",
        "description": "Assignment_4.krishnaraj_cis_4",
        "peekOfCode": "s3 = boto3.client('s3')\nimport json\ndef put(key, value):\n    # store something\n    s3.put_object(\n        Body=json.dumps({key: value}),\n        Bucket=\"cyclic-tame-red-seagull-shoe-us-east-1\",\n        Key=f\"some_files/{key}.json\"\n    )\n    print(\"Stored successfully\")",
        "detail": "Assignment_4.krishnaraj_cis_4",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "awsenv.Scripts.activate_this",
        "description": "awsenv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "awsenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "awsenv.Scripts.jp",
        "description": "awsenv.Scripts.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "awsenv.Scripts.jp",
        "documentation": {}
    }
]